generator client {
  provider = "prisma-client-js"
  // https://www.prisma.io/docs/concepts/components/prisma-client/full-text-search
  // https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#compare-columns-in-the-same-table
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id            String             @id @unique
  walletAddress String             @unique
  name          String             @unique
  nonce         String             @unique @default(uuid())
  role          Role               @default(User)
  deletedAt     DateTime?
  lastLogin     DateTime?
  createdAt     DateTime           @default(now())
  notifications UserNotification[]
  betSlips      BetSlip[]
  leaderboards  Leaderboard[]
  transactions  Transaction[]
}

model BetSlipGame {
  id                   String     @id @unique
  gameId               Int?
  numberOfParticipants Int        @default(0)
  tokens               SplToken[]
  tokenAmounts         Int[]
  v13Right             Int
  v12Right             Int
  v11Right             Int
  v10Right             Int
  home                 Boolean
  away                 Boolean
  draw                 Boolean
  gameResult           Boolean
  createdAt            DateTime   @default(now())
  betSlips             BetSlip[]
  games                Game[]
}

model BetSlip {
  id            String            @id @unique
  totalWager    Float
  status        BetSlipStatusType
  predictions   Prediction[]
  finalResults  Int[]
  userId        String?
  betSlipGameId String?
  totalWin      Int
  createdAt     DateTime          @default(now())
  user          User?             @relation(fields: [userId], references: [id])
  BetSlipGame   BetSlipGame?      @relation(fields: [betSlipGameId], references: [id])
}

model Prediction {
  id        String   @id @unique
  first     Boolean
  equal     Boolean
  second    Boolean
  BetSlip   BetSlip? @relation(fields: [betSlipId], references: [id])
  betSlipId String?
}

model Game {
  id            String        @id @unique
  betSlipGameId String?
  opponent1     String
  opponent2     String
  dateTime      DateTime      @default(now())
  result        String
  leage         String
  BetSlipGame   BetSlipGame[]
}

model Leaderboard {
  id        String   @id @unique
  userId    String?
  points    Int
  rank      Int
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Transaction {
  id        String   @id @unique
  userId    String?
  type      String
  amount    Float
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

enum Role {
  Superadmin
  Admin
  Tester
  User
}

model SplToken {
  id            String       @id @unique
  name          String
  address       String       @unique
  decimals      Int
  symbol        String
  priority      Int // should this be @unique?
  icon          String
  BetSlipGame   BetSlipGame? @relation(fields: [betSlipGameId], references: [id])
  betSlipGameId String?
}

enum GlobalStatusType {
  Success
  Info
  Warning
  Maintenance
}

enum BetSlipStatusType {
  Deposited
  Pending
  Resolved
}

model Notification {
  id        String             @id @unique
  title     String
  body      String
  image     String?
  createdAt DateTime           @default(now())
  users     UserNotification[]
}

model UserNotification {
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId String
  readAt         DateTime?

  @@id([userId, notificationId])
}
